crop_exp <- as.vector(df1$cropdmgexp)
view(crop_exp)
View(crop_exp)
if_else(is.numeric(crop_exp[j]),crop_exp[j],NA)
if_else(is.numeric(crop_exp[j]),crop_exp[j],999)
?if_else
if_else(is.numeric(crop_exp[j]),crop_exp[j],"NA")
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i],"FALSE"))
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], 99))
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], "99"))
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], as.integer(99)))
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], as.character
(99)))
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], "NA"))
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i]))
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], crop_exp[j]))
class(crop_exp[j])
class(sub$V1[i])
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], as.factor("NA")))
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], as.factor("NA")))
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], as.character("NA")))
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], "NA"))
class(sub$V2[i])
class("NA2
sdf
f
3
4
ยง
!
)
class("NA")
sub <- as.data.frame(cbind(c("h", "k", "m", "b", "+", "-", "?"),c(2,3,6,9,NA,NA,NA)))
sub$V1 <- as.character(sub$V1)
sub$V2 <- as.character(sub$V2)
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], "NA"))
i=2
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], "NA"))
crop_exp[j]
sub$V1[i]
sub <- as.data.frame(cbind(c("h", "H", "k", "K", "m", "M", "b", "B", "+", "-", "?"),
c(2, 2, 3, 3, 6, 6, 9, 9,NA,NA,NA)))
sub$V1 <- as.character(sub$V1)
sub$V2 <- as.character(sub$V2)
i=4
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], "NA"))
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], FALSE))
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], "FALSE"))
for (i in 1:7) {
for(j in 1:len){
if_else(is.numeric(crop_exp[j]),crop_exp[j],
if_else(crop_exp[j] == sub$V1[i], sub$V2[i], "FALSE"))
}
}
unique(crop_exp)
len1 <- length(sub$V1)
len2 <- length(crop_exp)
for(j in 1:len2){if_else(is.numeric(crop_exp[j]),
crop_exp[j],
for (i in 1:len1) {
if_else(crop_exp[j] == sub$V1[i],
sub$V2[i],
"FALSE")
})
}
unique(crop_exp)
install.packages("shiny")
crop_exp <- as.vector(df1$cropdmgexp)
unique(crop_exp)
crop_exp <- as.vector(df1$cropdmgexp[1:5000])
unique(crop_exp)
crop_exp <- as.vector(df1$cropdmgexp[50000:55000])
unique(crop_exp)
crop_exp <- as.vector(df1$cropdmgexp[350000:355000])
unique(crop_exp)
crop_exp <- as.vector(df1$cropdmgexp[350000:355000])
unique(crop_exp)
sub <- as.data.frame(cbind(c("h", "H", "k", "K", "m", "M", "b", "B", "+", "-", "?"),
c(2, 2, 3, 3, 6, 6, 9, 9,NA,NA,NA)))
sub$V1 <- as.character(sub$V1)
sub$V2 <- as.character(sub$V2)
len1 <- length(sub$V1)
len2 <- length(crop_exp)
for(i in 1:len1) gsub(sub$V1[i],sub$V2[i], crop_exp)
unique(crop_exp)
crop_exp <- as.vector(df1$cropdmgexp[350000:355000])
unique(crop_exp)
?gsub
for(i in 1:len1) gsub(sub$V1[i],sub$V2[i], crop_exp)
for(i in 1:len1) f <- gsub(sub$V1[i],sub$V2[i], crop_exp)
unique(f)
for(i in 4) f <- gsub(sub$V1[i], sub$V2[i], crop_exp)
unique(f)
1:len1
for(i in 1:len1) f <- gsub(sub$V1[i],sub$V2[i], crop_exp)
for(j in 1:len2){
crop_exp[j] <- if_else(is.numeric(crop_exp[j]), crop_exp[j],
for(i in 1:len1) gsub(sub$V1[i],sub$V2[i], crop_exp[j]))
}
unique(crop_exp)
crop_exp <- as.vector(df1$cropdmgexp[350000:355000])
unique(crop_exp)
for(j in 1:len2){
crop_exp[j] <- if_else(is.numeric(crop_exp[j]), crop_exp[j],
for(i in 1:4) gsub(sub$V1[i],sub$V2[i], crop_exp[j]))
}
unique(crop_exp)
for(j in 1:len2){
crop_exp[j] <- if_else(is.numeric(crop_exp[j]), crop_exp[j],
for(i in 4) gsub(sub$V1[i],sub$V2[i], crop_exp[j]))
}
unique(crop_exp)
crop_exp <- as.vector(df1$cropdmgexp[350000:355000])
unique(crop_exp)
for(j in 1:len2){
crop_exp[j] <- if_else(is.numeric(crop_exp[j]), crop_exp[j],
for(i in 4) gsub(sub$V1[i],sub$V2[i], crop_exp[j]))
}
unique(crop_exp)
crop_exp <- as.vector(df1$cropdmgexp[350000:355000])
unique(crop_exp)
crop_exp[j] <- if_else(is.numeric(crop_exp[j]), crop_exp[j],
gsub(sub$V1[4],sub$V2[4], crop_exp[j]))
unique(crop_exp)
sub$V1[4]
sub$V2[4]
crop_exp
for(j in 840){
crop_exp[j] <- if_else(is.numeric(crop_exp[j]), crop_exp[j],
gsub(sub$V1[4], sub$V2[4], crop_exp[j]))
}
crop_exp[840]
crop_exp <- as.vector(df1$cropdmgexp[350000:355000])
unique(crop_exp)
for(j in 1:5001){
crop_exp[j] <- if_else(is.numeric(crop_exp[j]), crop_exp[j],
for(i in 1:11) gsub(sub$V1[i],sub$V2[i], crop_exp[j]))
}
unique(crop_exp)
for(i in 1:len1){
crop_exp[crop_exp==sub$V1[i]] <- sub$V2[i]
}
unique(crop_exp)
crop_exp <- as.vector(df1$cropdmgexp[350000:355000])
unique(crop_exp)
crop_exp[crop_exp==sub$V1[i]] <- sub$V2[i]
for(i in 1:len1){
crop_exp[crop_exp==sub$V1[i]] <- sub$V2[i]
}
crop_exp
unique(crop_exp)
crop_exp <- as.vector(df1$cropdmgexp)
sub <- as.data.frame(cbind(c("h", "H", "k", "K", "m", "M", "b", "B", "+", "-", "?"),
c(2, 2, 3, 3, 6, 6, 9, 9,NA,NA,NA)))
sub$V1 <- as.character(sub$V1)
sub$V2 <- as.character(sub$V2)
for(i in 1:length(sub$V1)){
crop_exp[crop_exp==sub$V1[i]] <- sub$V2[i]
}
unique(crop_exp)
unique(prop_exp)
prop_exp <- as.vector(df1$propdmgexp)
prop_exp <- as.vector(df1$propdmgexp)
unique(prop_exp)
crop_exp <- as.vector(df1$cropdmgexp)
prop_exp <- as.vector(df1$propdmgexp)
sub <- as.data.frame(cbind(c("h", "H", "k", "K", "m", "M", "b", "B", "+", "-", "?"),
c(2, 2, 3, 3, 6, 6, 9, 9,NA,NA,NA)))
sub$V1 <- as.character(sub$V1)
sub$V2 <- as.character(sub$V2)
for(i in 1:length(sub$V1)){
crop_exp[crop_exp==sub$V1[i]] <- sub$V2[i]
prop_exp[prop_exp==sub$V1[i]] <- sub$V2[i]
}
unique(crop_exp)
unique(prop_exp)
crop_dmg <- as.vector(df1$cropdmg)*10^(crop_exp)
crop_dmg <- as.vector(df1$cropdmg)*10**(crop_exp)
crop_dmg <- df1$cropdmg * 10**crop_exp
dim(df1$cropdmg)
crop_dmg <- df1$cropdmg * 10**as.numeric(crop_exp)
prop_dmg <- df1$propdmg * 10**as.numeric(prop_exp)
df1 <- cbind(df1, crop_dmg, prop_dmg)
names(df1)
df1 <- df1 %>%
select(!(propdmg, cropdmg, propdmgexp, cropdmgexp))
df1 <- df1 %>%
select(!c((propdmg, cropdmg, propdmgexp, cropdmgexp)))
df1 <- df1[,!c(propdmg, cropdmg, propdmgexp, cropdmgexp)]
names(df1)
df1 <- df1[,c(1:4,9:11)]
library(readr) #Reading data fast
library(dplyr) #Data Manipulation
library(lubridate) #Date Manipulation
library(ggplot2)
#Loading of Data from URL
library(readr)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",temp)
con <- bzfile(temp)
df <- read_csv(con)
unlink(temp)
rm(con, temp) #
df1 <- df %>%
#Selection of relevant variables (Date, Event, Healt Impact and Economic Impact)
select(REFNUM, BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, CROPDMG, PROPDMGEXP, CROPDMGEXP) %>%
mutate(cases_harm = FATALITIES + INJURIES)
rm(df) #df is not needed anymore, I use df1 for the further analysis.
#Adjust Variable and Event Names to "lowercase"
names(df1) <- tolower(names(df1))
df1$evtype <- tolower(df1$evtype)
#Delete summary event types
df1 <- df1 %>%
filter(!(evtype %in% grep('summary', evtype, value=TRUE, ignore.case=TRUE)))
#Create the Damage Variables (Property and Crop Damage)
##Build Exponent Vectors (K - Thousand (3), M - Million (6), B - Billion (9), H / h - Hundred (2),
##+ / - / ? - NA (unkown))
crop_exp <- as.vector(df1$cropdmgexp)
prop_exp <- as.vector(df1$propdmgexp)
sub <- as.data.frame(cbind(c("h", "H", "k", "K", "m", "M", "b", "B", "+", "-", "?"),
c(2, 2, 3, 3, 6, 6, 9, 9,NA,NA,NA)))
sub$V1 <- as.character(sub$V1)
sub$V2 <- as.character(sub$V2)
for(i in 1:length(sub$V1)){
crop_exp[crop_exp==sub$V1[i]] <- sub$V2[i]
prop_exp[prop_exp==sub$V1[i]] <- sub$V2[i]
}
##Create crop_dmg and prop_dmg
crop_dmg <- df1$cropdmg * 10**as.numeric(crop_exp)
prop_dmg <- df1$propdmg * 10**as.numeric(prop_exp)
##Combine in one dataset
df1 <- cbind(df1, crop_dmg, prop_dmg)
df1 <- df1[,c(1:4,9:11)]
#Adjust class of relevant variables
library(lubridate)
df1$bgn_date <- mdy_hms(df1$bgn_date, tz=Sys.timezone())
library(ggplot2)
g <- ggplot(data=df1) + geom_line(aes(x=df1$bgn_date, color=c(df1$crop_dmg,df1$prop_dmg)))
g
library(ggplot2)
g <- ggplot(data=df1) + geom_line(aes(x=df1$bgn_date,y=c(df1$crop_dmg,df1$prop_dmg)))
g
df1_plot <- df1 %>%
filter(is.na(crop_dmg) | is.na(prop_dmg))
View(df1_plot)
names(df1)
##Loading Data from URL
```{r, echo = TRUE, message = FALSE}
#Loading of Data from URL
library(readr)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",temp)
con <- bzfile(temp)
df <- read_csv(con)
unlink(temp)
rm(con, temp) #Drop irrelevant variables
```
##Adjust and Select the relevant Variables
```{r, echo = TRUE, message = FALSE}
#Identification of relevant Variables
library(dplyr)
df1 <- df %>%
#Selection of relevant variables (Date, Event, Healt Impact and Economic Impact)
select(REFNUM, BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, CROPDMG, PROPDMGEXP, CROPDMGEXP) %>%
mutate(cases_harm = FATALITIES + INJURIES)
rm(df) #df is not needed anymore, I use df1 for the further analysis.
#Adjust Variable and Event Names to "lowercase"
names(df1) <- tolower(names(df1))
df1$evtype <- tolower(df1$evtype)
#Delete summary event types
df1 <- df1 %>%
filter(!(evtype %in% grep('summary', evtype, value=TRUE, ignore.case=TRUE)))
#Create the Damage Variables (Property and Crop Damage)
##Build Exponent Vectors (K - Thousand (3), M - Million (6), B - Billion (9), H / h - Hundred (2),
##+ / - / ? - NA (unkown))
crop_exp <- as.vector(df1$cropdmgexp)
prop_exp <- as.vector(df1$propdmgexp)
sub <- as.data.frame(cbind(c("h", "H", "k", "K", "m", "M", "b", "B", "+", "-", "?"),
c(2, 2, 3, 3, 6, 6, 9, 9,NA,NA,NA)))
sub$V1 <- as.character(sub$V1)
sub$V2 <- as.character(sub$V2)
for(i in 1:length(sub$V1)){
crop_exp[crop_exp==sub$V1[i]] <- sub$V2[i]
prop_exp[prop_exp==sub$V1[i]] <- sub$V2[i]
}
##Create crop_dmg and prop_dmg
crop_dmg <- df1$cropdmg * 10**as.numeric(crop_exp)
prop_dmg <- df1$propdmg * 10**as.numeric(prop_exp)
##Combine in one dataset
df1 <- cbind(df1, crop_dmg, prop_dmg)
df1 <- df1[,c(refnum, bgn_date, evtype, fatalities, injuries, crop_dmg, prop_dmg)]
#Adjust class of relevant variables
library(lubridate)
df1$bgn_date <- mdy_hms(df1$bgn_date, tz=Sys.timezone())
```
df1 <- df1 %>%
select(refnum, bgn_date, evtype, fatalities, injuries, crop_dmg, prop_dmg)
df1$bgn_date <- mdy_hms(df1$bgn_date, tz=Sys.timezone())
View(df1)
names(df1$evtype)
unique(df1$evtype)
View(df1_test)
names(df1_test) <- tolower(names(df1_test))
df1_test$evtype <- tolower(df1_test$evtype)
gsub("tstm", "thunderstorm", df1$evtype)
View(df1_test)
gsub("tstm", "thunderstorm", df1_test$evtype)
unique(df1_test$evtype
)
#Loading of Data from URL
library(readr)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",temp)
con <- bzfile(temp)
df <- read_csv(con)
unlink(temp)
rm(con, temp) #Drop irrelevant variables
```
##Adjust and Select the relevant Variables
```{r, echo = TRUE, message = FALSE}
#Identification of relevant Variables
library(dplyr)
df1 <- df %>%
#Selection of relevant variables (Date, Event, Healt Impact and Economic Impact)
select(REFNUM, BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, CROPDMG, PROPDMGEXP, CROPDMGEXP) %>%
mutate(cases_harm = FATALITIES + INJURIES)
#Adjust Variable and Event Names to "lowercase"
names(df1) <- tolower(names(df1))
df1$evtype <- tolower(df1$evtype)
#Delete summary event types
df1 <- df1 %>%
filter(!(evtype %in% grep('summary', evtype, value=TRUE, ignore.case=TRUE)))
#Rewrite tstm to thunderstorm
gsub("tstm", "thunderstorm", df1$evtype)
#Create the Damage Variables (Property and Crop Damage)
##Build Exponent Vectors (K - Thousand (3), M - Million (6), B - Billion (9), H / h - Hundred (2),
##+ / - / ? - NA (unkown))
crop_exp <- as.vector(df1$cropdmgexp)
prop_exp <- as.vector(df1$propdmgexp)
sub <- as.data.frame(cbind(c("h", "H", "k", "K", "m", "M", "b", "B", "+", "-", "?", NA),
c(2, 2, 3, 3, 6, 6, 9, 9,NA,NA,NA,0)))
sub$V1 <- as.character(sub$V1)
sub$V2 <- as.character(sub$V2)
for(i in 1:length(sub$V1)){
crop_exp[crop_exp==sub$V1[i]] <- sub$V2[i]
prop_exp[prop_exp==sub$V1[i]] <- sub$V2[i]
}
##Create crop_dmg and prop_dmg
crop_dmg <- df1$cropdmg * 10**as.numeric(crop_exp)
prop_dmg <- df1$propdmg * 10**as.numeric(prop_exp)
##Combine in one dataset
df1 <- cbind(df1, crop_dmg, prop_dmg)
df1 <- df1 %>%
select(refnum, bgn_date, evtype, fatalities, injuries, crop_dmg, prop_dmg)
#Adjust class of relevant variables
library(lubridate)
df1$bgn_date <- mdy_hms(df1$bgn_date, tz=Sys.timezone())
View(df1)
df1_small <- df1 %>%
filter(is.na(crop_dmg) & is.na(prop_dmg))
g <- ggplot(data=df1_dmg) +
geom_line(aes(x=df1_dmg$bgn_date, y=df1_dmg$crop_dmg), color="red") +
geom_line(aes(x=df1_dmg$bgn_date, y=df1_dmg$prop_dmg), color="blue") +
geom_line(aes(x=df1_dmg$bgn_date, y=df1_dmg$prop_dmg+df1_dmg$crop_dmg), color="green")
#Events with observed damage
df1_dmg <- df1 %>%
filter(is.na(crop_dmg) & is.na(prop_dmg))
#Events with observed damage
df1_dmg <- df1 %>%
filter(is.na(crop_dmg) & is.na(prop_dmg))
g <- ggplot(data=df1_dmg) +
geom_line(aes(x=df1_dmg$bgn_date, y=df1_dmg$crop_dmg), color="red") +
geom_line(aes(x=df1_dmg$bgn_date, y=df1_dmg$prop_dmg), color="blue") +
geom_line(aes(x=df1_dmg$bgn_date, y=df1_dmg$prop_dmg+df1_dmg$crop_dmg), color="green")
g
View(df1_dmg)
df1_dmg <- df1 %>%
filter(!(is.na(crop_dmg) & is.na(prop_dmg)))
g <- ggplot(data=df1_dmg) +
geom_line(aes(x=df1_dmg$bgn_date, y=df1_dmg$crop_dmg), color="red") +
geom_line(aes(x=df1_dmg$bgn_date, y=df1_dmg$prop_dmg), color="blue") +
geom_line(aes(x=df1_dmg$bgn_date, y=df1_dmg$prop_dmg+df1_dmg$crop_dmg), color="green")
g
View(df1)
library(readr) #Reading data fast
library(dplyr) #Data Manipulation
library(lubridate) #Date Manipulation
library(ggplot2)
library(readr)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",temp)
con <- bzfile(temp)
df <- read_csv(con)
unlink(temp)
rm(con, temp)
library(dplyr)
df1 <- df %>%
#Selection of relevant variables (Date, Event, Healt Impact and Economic Impact)
select(REFNUM, BGN_DATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, CROPDMG, PROPDMGEXP, CROPDMGEXP) %>%
mutate(cases_harm = FATALITIES + INJURIES)
#Adjust Variable and Event Names to "lowercase"
names(df1) <- tolower(names(df1))
df1$evtype <- tolower(df1$evtype)
df1 <- df1 %>%
filter(!(evtype %in% grep('summary', evtype, value=TRUE, ignore.case=TRUE)))
gsub("tstm", "thunderstorm", df1$evtype)
crop_exp <- as.vector(df1$cropdmgexp)
prop_exp <- as.vector(df1$propdmgexp)
sub <- as.data.frame(cbind(c("h", "H", "k", "K", "m", "M", "b", "B", "+", "-", "?", NA),
c(2, 2, 3, 3, 6, 6, 9, 9,NA,NA,NA,0)))
sub$V1 <- as.character(sub$V1)
sub$V2 <- as.character(sub$V2)
for(i in 1:length(sub$V1)){
crop_exp[crop_exp==sub$V1[i]] <- sub$V2[i]
prop_exp[prop_exp==sub$V1[i]] <- sub$V2[i]
}
##Create crop_dmg and prop_dmg
crop_dmg <- df1$cropdmg * 10**as.numeric(crop_exp)
prop_dmg <- df1$propdmg * 10**as.numeric(prop_exp)
##Combine in one dataset
df1 <- cbind(df1, crop_dmg, prop_dmg)
df1 <- df1 %>%
select(refnum, bgn_date, evtype, cases_harm, fatalities, injuries, crop_dmg, prop_dmg)
df1_small <- df1 %>%
filter(is.na(crop_dmg) & is.na(prop_dmg))
#Adjust class of relevant variables
library(lubridate)
df1$bgn_date <- mdy_hms(df1$bgn_date, tz=Sys.timezone())
rm(df1_small)
View(df1)
plot_skew <- as.data.frame(table(df1$`bgn_date`))
plot(plot_skew,
main = "Density of observed Storm Data",
xlab = "Timeline of events",
ylab = "Number of registered data points")
head(c(df_harm1, df_harm2), 5)
df_harm1 <- df1 %>%
group_by(bgn_date) %>%
summarise(harm_by_date = sum(cases_harm))
```
df_harm2 <- df1 %>%
group_by(evtype) %>%
summarise(total_harm = sum(cases_harm)) %>%
arrange(desc(total_harm))
head(c(df_harm1, df_harm2), 5)
#What events harm the population most?
df_harm2 <- df1 %>%
group_by(evtype) %>%
summarise(total_harm = sum(cases_harm)) %>%
arrange(desc(total_harm))
head(df_harm2, 3)
#What events cause most Deaths
df_deaths <- df1 %>%
group_by(evtype) %>%
summarise(total_deaths = sum(fatalities)) %>%
arrange(desc(total_deaths))
head(df_deaths, 3)
#What events cause most Injuries
df_injuries <- df1 %>%
group_by(evtype) %>%
summarise(total_injuries = sum(injuries)) %>%
arrange(desc(total_injuries))
head(df_injuries, 3)
df1$evtype <- gsub("tstm", "thunderstorm", df1$evtype)
#What events harm the population most?
df_harm2 <- df1 %>%
group_by(evtype) %>%
summarise(total_harm = sum(cases_harm)) %>%
arrange(desc(total_harm))
head(df_harm2, 3)
#What events cause most Deaths
df_deaths <- df1 %>%
group_by(evtype) %>%
summarise(total_deaths = sum(fatalities)) %>%
arrange(desc(total_deaths))
head(df_deaths, 3)
#What events cause most Injuries
df_injuries <- df1 %>%
group_by(evtype) %>%
summarise(total_injuries = sum(injuries)) %>%
arrange(desc(total_injuries))
head(df_injuries, 3)
df_crop_dmg <- df1 %>%
group_by(evtype) %>%
summarise(crop_damage_total = sum(crop_dmg)) %>%
arrange(desc(crop_damage_total))
#Event Types with greatest Economic Consequences
head(df_crop_dmg, 5)
#Developement of Economic Consequences over all Event Types
df_prop_dmg <- df1 %>%
group_by(evtype) %>%
summarise(prop_damage_total = sum(prop_dmg)) %>%
arrange(desc(prop_damage_total))
#Event Types with greatest Economic Consequences
head(df_prop_dmg, 5)
